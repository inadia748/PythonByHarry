What is a modules?
A module is a file containing code written by somebody else(usually) which can be imported and used in our programs. 
example: 'import os' is a module which we can import. The files needed to be installed inorder to import those files.


Types of modules:
1) Built in modules, Pre-installed in python
2. External modules, Need to install using pip


Pip
Pi is the package manager for python you can use pip to install a module in your system. example:- pip install flask, it installs flask module.


repl means read evaluate print loop. You can use python as a calculator.
In the terminal, if you write 'python', repl will be on, then inorder to exit, type 'exit();





A variable is the name given to a memory location in a program. for example:-
a=30                                          
b = "Nadia"
c = 71.22

Variables => Container to store a value.
Keywords => Reserved words in python.
Indentifiers => class/function/variable name.

Search for "keyword in python", it is reserved words in  python.

Data Types 
Primarily these are following data types in Python:
1. Integers
2. Floating point numbers
3. Strings
4. Booleans
5. None

Python is a fantastic language that automatically indentifies the type of data for us.

Rules for defining a Variable name. It also applies to other identifiers.
1. A variable name can contain alphabets, digits and underscores.
2. A variable name can only start with an alphabet and undercore.
3. A variable name cannot start with a digit.
4. No white space is allowed to be used inside a variable name.


Examples of a few variable names are:-
harry, one8, seven_, _seven, etc.



Operators in Python
Following are some common operators:
1. Arithmetic Operaors => +, -, *, / etc
2. Assigned Operators => =, +=, -=, etc.
3. Comparison Operators => ==, >=, <=, >, <, != etc.
4. Logical Operators => and, or, not.


type() and typecasting
type functions is used to find the data type of a given variable in Python.

a = 31
type(a) => class<int>

b = '31'
type(b) => class<str>

A number can be converted into a string and vice versa (if possible)
There are many functions to convert one data type to another.

str(31) => '31'   (Integer to string conversion)
int("31") => 31    (String to Integer conversion)
float(32) => 32.0   (Integer to float conversion)
        ... and so on

Here '31' is a string literal and 31 a numeric literal



input() function
This function allows the user to take input from the keyboard as a string

a = input('Enter name')   // if a user enters 'nadia', then a = 'nadia'

It is important to note that the output of input is always a string(even if the number is entered). // If a user enters 34, then a = '34'






Strings

String is a data type in Python. String is a sequence of characters enclosed in quotes.
We can primarily, write a string in 3 ways:
1. Single quoted strings -> a = 'Nadia'
2. Double quoted Strings -> b = "Nadia"
3. Triple quoted Strings -> c = '''Nadia'''

String Slicing
A string in Python can be sliced for getting a part of the string.

Consider the following string:
    name = Harry
            01234
            -5-4-3-2-1
        length = 5
The index in a string starts from 0 to (length - 1) in Python. Inorder to slice a string, we use the following syntax:
        sl = name[ind_start:ind_end]
                ind_start-> first index included
                ind_end -> last index not included


        sl[0:3] returns "Har" -> characters from 0 to 3
        sl[1:3] returns "ar" -> characters from 1 to 3.

Negative indices: Negative indices can also be used as shown in the figure above. -1 corresponds to (length -1)th index, -2 corresponds to (length -2)th index....



Slicing with skip value
We can provide a skip value as a part of our slice like this:
        word = "amazing"
        word[1: 6: 2] -> mzn

Other advanced slicing techniques
        word = "amazing"
        word[:7] -> word[0:7] -> 'amazing'
        word[0:] -> word[0:7] -> 'amazing'


String Functions
Someof the mostly used functions to perform operations on or manipulate strings

1) len() function -> This function returns the length of the string.
        len("Harry") -> returns 5

2) string.endswith('rry') => This function tells whether the variable ends with string "rry" or  not. If the string is "Harry", it returns true for 'rry' since Harry ends with 'rry'.

3) string.count('c') -> Counts the total number of occurence of any character.

4) string.capitalize() -> This function capitalizes the first character of a give string.

5) string.find(word) -> This function finds a word and returns the index of first occurence of that word in the string.

6) string.replace(oldword, newword) -> This function replaces the oldword with the newword in the entire string.




Escape Sequence characters

Sequence of characters after backslash '\' -> Escape Sequence characters

Escape sequence character comprises of more than one characters but represents one character when used within the strings.

Example: \n, \t, \', \\ etc
        \n -> newline
        \t -> tab
        \' -> single quote
        \\ -> backslash








List and Tuples

Python lists are containers to store a set of values of any data type.
        friends = ['Sarah', 'Fatima', 'Oishi', 7, True, False]


List Indexing
A list can be indexed just like a string.
        l1 = [7,9,'Harry']
        l1[0] => 7
        l1[1] => 9
        l1[2] => 'Harry'
        l1[59] => error
        l1[0:2] = [7, 9]


List Methods

l1 = [1,8,7,2,21,15]

1) l1.sort() : updates the list to [1, 2, 7, 8, 15, 21]

2) l1.reverse(): updates the list to [15, 21, 2, 7, 7, 8, 1]

3) l1.append(8): adds 8 at the end of the list.

4) l1.insert(3,8): This will add 8 at index 3.

5) l1.pop(2): will delete element at index 2 and return its value

6) l1.rem(21): will remove 21 from the list.


There are many more methods. Please check the documentations.

*******Go to python docs to check for updates and references *****




Tuples in Python
A tuple is an immutable(cannot be changed) data type in python.

a = () => Empty tuple
a = (1,) => Tuple with only one elements needs a comma
a = (1,7,2) => Tuple with more than one elements

Once defined a tuple elements cannot be altered or manipulated.


Tuple methods

Consider the following tuple
        a = (1, 7, 2)

1. a.count(1) : a.count(1) will return the number of times 1 occurs in a.

2. a.index(1) : a.index(1) will return the index of first occurence of 1 in a.







Dictionary and Sets

Dictionary is a collection of key-value pairs.

Syntax: 
        a = {
                "key": "value",
                'Nadia': 'Code'
                'marks': 100
                'list': [1, 2, 9],
        }

a['key'] => Prints 'value'
a['list'] => Prints [1, 2, 9]



Properties of a Python Dictionaries:
1) It is unordered.
2) It is mutable
3) It is indexed.
4) Cannot contain duplicate keys.




Dictionary Methods:

Consider the following dictionary:
a = {
        'name': 'Nadia',
        'from': 'Dhaka',
        'marks': [83,92,59],
}

1) a.items() -> returns a list of (key,value) tuples

2) a.keys() -> returns a list containing dictionary 's keys.

3) a.update({'friend': 'Sam'}): updates the dictionary with supplied key-value pairs.

4) a.get('name'): returns the value of the specified keys (and value is returned. example:- 'Nadia' is returned)


More methods are available on docs python orgs.





Sets in Python

Sets is a collection of non repetetive elements.

s = set()         ==> No repetition is allowed
s.add(1)             
s.add(2)          set = {1, 2}

If you are a programming beginner without much knowledge of mathematical operations on sets, you can simply look at sets in python as data types containing unique values.


Properties of Sets

1) Sets are unordered. => Element Order does not matter.

2) Sets are unindexed. => Cannot access elements by index

3) There is no way to change items in sets.

4) Sets cannot contain duplicate values.




Operations on Sets

Consider the following set:
        s = {1, 8, 2, 3}

1) len(s): Return 4, the length of the set.

2) s.remove(8): Updates this set and removes '8' from the set.

3) s.pop(): Removes an arbitary element from the set and returns the element removed.

4) s.clear(): empties the set s.

5) s.union({8,11}): returns a new set with all items from both sets. => {1,8,2,3,11}

6) s.intersection({8,11}): Returns a set which contains only items in both sets. => {8}







Conditional Expressions


Sometimes we want to play mobile games on our phone if the day is sunday.
Sometimes, we order icecream if the day is sunny.
Sometimes, we go hiking if our parents allow.


All these are the decisions which depends on a conditions being met.
In Python programming too, we must be able to execute instructions on a  condition(s) being met. This is what conditions are for.


If else and elif in Python:
If else and elif statements  are multiway decisions taken by our program due to certain conditions in our code.


Syntax:
        if(condition1)
                print('yes')
        elif(condition2)
                print('no')
        else:
                print('Maybe')

Code Example:
        a = 22
        if(a>9):
                print('Greater')
        else(a<9):
                print('Lesser')
        



Relational Operators:
Relational operators are used to evaluate conditions inside the if statements. Some examples of relational operators are:

== -> equal
>= -> greater than or equal to
<= -> lesser than or equal to
> -> greater than
< -> lesser than


Logical Operators:
In python logical operators operated on conditional statements. Example:

and -> true if both operands are true else false.
or -> true if atleast one operand is true else false.
not -> inverts true to false and false to true.




elif clause:
elif in python means [else if]. An if statement can be chained together with a lot of these elif statements followed by an else statements.

        -> This ladder will stop once a condition in an if or an elif statement is met.

if(condition1):
        #code
elif(condition2):               
        #code
elif(condition3):
        #code
else:
        #code




Important notes:
1. There can be any number of elif statements.
2. last else is executed only if all the conditions inside elif fails.








Loops in Python

Sometime we want to repeat a set of statements of our program. For instance: Print 1 to 1000


Loops make it easy for a programmer to tell the computer, which set of instructions to repeat and how!


Types of loops in Python:
Primarily there are two types of loops in Python:
1. while loop
2. for loop


While loop
The syntax of a while loop like this:

The block keeps executing until the condition is fulfilled.

while condition:
        #body of the loop

In while loops, the condition is checked first. If it evaluates to be true, the body of the loop is executed, otherwise not!
If the loop is entered, the process of [condition check and execution] is continued until the condition becomes false.




For loop
A for loop is used to iterate through a sequence like list, tuple, or string [iterables].

The syntax of a for loop looks like this:

l = [1, 7, 8]

for item in l:
        print(item)

The output will be 1, 7 and 8



Range in Python
The range function in  python is used to generate a sequence of numbers.

We can also specify the start, stop and step-size as follows:
        range(start, stop, step_size)
                                step_size is not usually used in range.

An example demonstrating range()

        for i in range(0, 7):
                print(i)
It will print 0 to 6.

        instead of range(0, 7), it can also be written as range(7)



For loop with else
An optional else can be used with a for loop if the code is to be executed when the loop exhausts.
        Example:
                l = [1, 7, 8]
                for item in l:
                        print(item)
                else:
                        print('Done')   ---> it will be printed when the loop exhausts.
        
        Output:
                1
                7
                8
                Done





The break statement
        'break' is used to come out of the loop when encountered. It instructs the program to - exit the loop now.

        Example:
                for in in range(0,80):
                        print(i)
                        if(i == 3)
                        break
        It will print 0, 1, 2 and 3.


The continue statement
'continue' is used to stop current iteration of the loop and continue with the next one. It instructs the program to 'skip this iteration'

Example:
        for i in range(4):
                print('printing')
                if i == 2:  # if it is 2, the iteration is skipped.
                        continue
                print(i)




pass statements
        pass is a null statement in python. It instructs to "Do nothing"

Example:
        l = [1, 7, 8]
        for item in l:
                pass
        #Without pass, the statement will throw you an error.
        









Functions and Recursions:

A function is a group of statemenst performing a specific task.

When a program gets bigger in size and its complexity grows, it gets difficult for a programmer to keep track on which piece of code is doing what!

A function can be reused by a programmer in a given program any number of times.


Example and Syntax of a function:
The syntax of a function looks as follows:

def func1():
        print('hello')


This function can be any number of times, anywhere in the program.



Function Call
Whenever we want to call a function, we put the name of the function followed by parenthesis as follows;
        fun1()   ---> This is function call.


Function defination
The part containing the exact set of instructions which are executed during the function call.



Types of functions in Python:
There are 2 types of functions in Python:
1) Built in Functions
2) User Defined functions

Examples of built in functions are print(), range(), len() etc.

The func1() function we defined is an example of user defined function.


Functions with arguments
A function can accept some values it can work with. We can put these values in the parenthesis. A function can also return values as shown below:

def greet(name):
        gr = "hello " + name
        return gr

a = greet('Nadia')




Default Parameter Value:
We can have a value as a default argument in a function.
If we specify name = 'stranger' in the line containing def, this value is used when no argument is passed.
For example:
        def greet(name = "Stranger"):
                #function body

        greet() -> Name will be 'Stranger' in function body as default.
        greet('Nadia') -> Name will be 'Nadia' in the function body (pass)


Recursions
Recursion is a function which calls itself. It is used to directly use a mathematical formula as a function. For example: 

factorial(n) = n * factorial(n - 1)

This function can be defines as follows:

def factorial(n):
        if n == 0 or n == 1:
                return 1
        else:
                return n * factorial(n-1) 

This works as follows:

        factorial(4):
        4 * factorial(3)
        4 * [3 * factorial(2)]
        4 * 3 * [2 * factorial(1)]
        4 * 3 * 2 * 1


The programmer need to beextremely careful while working with recursion to ensure that the function does not initially keep calling itself. Recursion is sometimes the most direct way to code an algorithms.










File I/O

The random Access memory is volatile and all its contents are lost once a program terminates. Inorder to persist the data forever, we use files.

A file is data stored in a storage device. A python program can talk to the file by reading content from it and writing content to it.

RAM --> volatile
HDD --> non volatile.



Types of Files 

There are 2 types of files:
1) Text files (.txt, .c etc)
2) Binary files ( .jpg, .dat etc)


Python has a lot of functions for reading, updating and deleting files.

Opening a file.
Python has an open() function for opening files. It takes 2 parameters: filename and mode.

open('this.txt', 'r')  -> mode of opening(reading)


Reading a file in Python 
f = open('this.txt', 'r')
text = f.read()
print(text)
f.close()

We can also specify the number of characters in the read() function: f.read(2), it will read 2 characters from the file.


Other methods to read the file:
we can also use f.readline() to on full line at a time.

f.readline() ---> reads one line from the file.


Modes of opening a file:

r -> open for reading
w -> open for writing
a -> open for appending
+ -> open for updating(read and write)

'rb' will open for read in binary mode.
'rt' will open for read in text mode.


Writing Files in Python.
In order to write to a file, we first open it in write or append mode after which, we use the python 's  f.write() to write to the file.

f = open('this.txt', 'w')
f.write('This is nice')
f.close()


with statement
The best way to open and close the file automatically is the with statements.











OOP
Solving a problem by creating objects is one of the most popular approaches in programming. This is called object oriented programming.

This concept focuses on using reusable codes(implements DRY principle)

Class
A class is a blueprint for creating objects.

(combines info to create a valid application)  <-----Blank Form   -----> Filled by an student  ----> Application of the student.

class ----> object instantiation ----> object
(contains info to create a valid object)



The syntax of a class looks like:

class Employee:
        #methods & variables.





Object:
An object is an instantiation of a class. When class is defined, a template(info) is defined. Memory is allocated only after object instantiation.

Objects of a given class can invoke the methods available to it without revealing the implementation details to the user. ---> Abstraction and Encapsulations.





Modelling a problem in OPPs:

We identify the following in our problem

Noun   ----> class -----> Employee
Adjective -----> Attributes -----> name, age, salary
Verbs    -------> Methods  ------> getSalary(), increment()


class Attributes
An attribute that belongs to the class rather than a particular object.

Example:

        class Employee:
                company = "Google"   ---> Specific to each class
        
        harry = Employee() -> object instantiation.
        harry.company
        Employee.company = 'Youtube'  -> changing the class attribute


Instance Attributes.
An attribute that belongs to the instance(object). Assuming the class from the previous example:

harry.name = 'Harry'
harry.salry = '30k'  => Adding instance attributes.

Note: Instance attributes takes preference over class attributes during assignment and retrieval.

harry attributes --> 1) Is attribute present in object?
2) Is attribute1 present in class?



'self' parameter
Self refers to the instance of the class. It is automatically passed with a function call from an object.

harry.getSalary() -> here, self is harry. It is equivalent to Employee.getSalary(harry)

The function getSalary is defined as:
        class Employee:
                company = "Google"
                def getSalary(self):
                        print('Salary is not there)






static methods
Sometimes we need a function that does not use the self parameter. We can define a static method like this:

@staticmethod
def greet():
        print('Hello user')







__init__() contructor
__init__() is a special method which is first run as soon as the object is created.

It takes self arguments and can also take further arguments.

For Example:

        class Employee:
                def __init_(self, name):
                        self.name = name
                def getSalry(self):
                        .....
        harry = Employee('harry')








Inheritance and more on OOPs

Inheritance is a way of creating a new class from an existing class.

Syntax:

class Employee:            --> Base class
        #code

class Programmer(Employee):      --> Derived or  child class.
        #code


We can use the methods and attribues of Employee in Programmer object.
Also, we can overwrite or add new attributes and methods in Programmer class.



Types of Inheritance:
1) Simple Inheritance
2) Multiple Inheritance
3) Multilevel Inheritance

Single Inheritance
        Single Inheritance occurs when child class only a single parent class.

                 Base
                  |
                  V
                  Derived

Multiple Inheritance
Multiple Inheritance occurs when the child class inherits from more tha one parent class.

        parent1          Parent2
           |________________|
                   |
                   V
                   Child 



Multilevel Inheritance
When a child class becomes a parent for another child class.

        Parent
          |
          V
        Child1
          |
          V
        Child2






super() method
super method is used to access the methods of a super class in the derived class.
super() __init__() -> calls constructor of the base class.


class methods.
A class method is a method which is bound to the class and not the object of the class.
@classmethod decorator is used to create a class method.



Syntax to create a class method:
@classmethod
def (cls, p1, p2):
        ....




@property decorators

Consider the following class

class Employee:
        @property
        def name(self):
        return self.name

if e = Employee() is an object of class Employee, we can pring (e.name) to print the e.name/call name() function


@getters and @setters
The method name with @property decorator is called getter method.
We can define a function + @name.setter decorator like below:

@name.setter 
def name(self, value):
        self.ename = value


Operator Overloading in Python:
Operators in python can be overloaded using dunder methods. 
These methods are called when a given operator is used on the objects.


Operators in python can be overloaded using the following methods:

p1 + p2   -------> p1 __add __(p2)
p1 - p2   -------->p1 __sub___(p2)
p1 * p2   --------> p1 ___mul___(p2)
p1 / p2    -------> p1 __freediv__(p2)
p1 // p2   -------> p1 __floordiv__(p2)


Other dunder/magic methods in python.

_str__() --> used to set what gets displayed upon calling str(obj)
__len__() ----> used to set what gets displayed upon calling __len__() or len(obj)